package chen.easyview.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TODO_BEAN".
*/
public class TodoBeanDao extends AbstractDao<TodoBean, Long> {

    public static final String TABLENAME = "TODO_BEAN";

    /**
     * Properties of entity TodoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property Name = new Property(1, String.class, "Name", false, "NAME");
        public final static Property Title = new Property(2, String.class, "Title", false, "TITLE");
        public final static Property Url = new Property(3, String.class, "Url", false, "URL");
        public final static Property Type = new Property(4, String.class, "Type", false, "TYPE");
        public final static Property StartTime = new Property(5, String.class, "StartTime", false, "START_TIME");
        public final static Property StopTime = new Property(6, String.class, "StopTime", false, "STOP_TIME");
        public final static Property CreatTime = new Property(7, String.class, "CreatTime", false, "CREAT_TIME");
        public final static Property IsComplete = new Property(8, Boolean.class, "IsComplete", false, "IS_COMPLETE");
    }


    public TodoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public TodoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TODO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"NAME\" TEXT," + // 1: Name
                "\"TITLE\" TEXT," + // 2: Title
                "\"URL\" TEXT," + // 3: Url
                "\"TYPE\" TEXT," + // 4: Type
                "\"START_TIME\" TEXT," + // 5: StartTime
                "\"STOP_TIME\" TEXT," + // 6: StopTime
                "\"CREAT_TIME\" TEXT," + // 7: CreatTime
                "\"IS_COMPLETE\" INTEGER);"); // 8: IsComplete
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TODO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TodoBean entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(2, Name);
        }
 
        String Title = entity.getTitle();
        if (Title != null) {
            stmt.bindString(3, Title);
        }
 
        String Url = entity.getUrl();
        if (Url != null) {
            stmt.bindString(4, Url);
        }
 
        String Type = entity.getType();
        if (Type != null) {
            stmt.bindString(5, Type);
        }
 
        String StartTime = entity.getStartTime();
        if (StartTime != null) {
            stmt.bindString(6, StartTime);
        }
 
        String StopTime = entity.getStopTime();
        if (StopTime != null) {
            stmt.bindString(7, StopTime);
        }
 
        String CreatTime = entity.getCreatTime();
        if (CreatTime != null) {
            stmt.bindString(8, CreatTime);
        }
 
        Boolean IsComplete = entity.getIsComplete();
        if (IsComplete != null) {
            stmt.bindLong(9, IsComplete ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TodoBean entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(2, Name);
        }
 
        String Title = entity.getTitle();
        if (Title != null) {
            stmt.bindString(3, Title);
        }
 
        String Url = entity.getUrl();
        if (Url != null) {
            stmt.bindString(4, Url);
        }
 
        String Type = entity.getType();
        if (Type != null) {
            stmt.bindString(5, Type);
        }
 
        String StartTime = entity.getStartTime();
        if (StartTime != null) {
            stmt.bindString(6, StartTime);
        }
 
        String StopTime = entity.getStopTime();
        if (StopTime != null) {
            stmt.bindString(7, StopTime);
        }
 
        String CreatTime = entity.getCreatTime();
        if (CreatTime != null) {
            stmt.bindString(8, CreatTime);
        }
 
        Boolean IsComplete = entity.getIsComplete();
        if (IsComplete != null) {
            stmt.bindLong(9, IsComplete ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TodoBean readEntity(Cursor cursor, int offset) {
        TodoBean entity = new TodoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Url
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // StartTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // StopTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // CreatTime
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0 // IsComplete
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TodoBean entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStartTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStopTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreatTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsComplete(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TodoBean entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TodoBean entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TodoBean entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
